{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/Bruna/moveit-next/src/contexts/ChallengesContext.tsx\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport challenges from '../../challenges.json';\nexport var ChallengesContext = /*#__PURE__*/createContext({});\nexport function ChallengesProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(1),\n      level = _useState[0],\n      setLevel = _useState[1];\n\n  var _useState2 = useState(0),\n      currentExperience = _useState2[0],\n      setCurrentExperience = _useState2[1];\n\n  var _useState3 = useState(0),\n      challengesCompleted = _useState3[0],\n      setChallengesCompleted = _useState3[1];\n\n  var _useState4 = useState(null),\n      activeChallenge = _useState4[0],\n      setActiveChallenge = _useState4[1];\n\n  function levelUp() {\n    setLevel(level + 1);\n  }\n\n  function startNewChallenge() {\n    var randomChallengeIndex = Math.floor(Math.random() * challenges.length);\n    var challenge = challenges[randomChallengeIndex];\n    setActiveChallenge(challenge);\n  }\n\n  function resetChallenge() {\n    setActiveChallenge(null);\n  }\n\n  return /*#__PURE__*/_jsxDEV(ChallengesContext.Provider, {\n    value: {\n      level: level,\n      currentExperience: currentExperience,\n      challengesCompleted: challengesCompleted,\n      levelUp: levelUp,\n      startNewChallenge: startNewChallenge,\n      activeChallenge: activeChallenge,\n      resetChallenge: resetChallenge\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 7\n  }, this);\n}\n\n_s(ChallengesProvider, \"IDVxXaKVFd+/4zWgrdFssD4qVSE=\");\n\n_c = ChallengesProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChallengesProvider\");","map":{"version":3,"sources":["/Users/Bruna/moveit-next/src/contexts/ChallengesContext.tsx"],"names":["createContext","useState","challenges","ChallengesContext","ChallengesProvider","children","level","setLevel","currentExperience","setCurrentExperience","challengesCompleted","setChallengesCompleted","activeChallenge","setActiveChallenge","levelUp","startNewChallenge","randomChallengeIndex","Math","floor","random","length","challenge","resetChallenge"],"mappings":";;;;;AAAA,SAAQA,aAAR,EAAuBC,QAAvB,QAAiD,OAAjD;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AAqBA,OAAO,IAAMC,iBAAiB,gBAAGH,aAAa,CAAE,EAAF,CAAvC;AAEP,OAAO,SAASI,kBAAT,OAAkE;AAAA;;AAAA,MAArCC,QAAqC,QAArCA,QAAqC;;AAAA,kBACxCJ,QAAQ,CAAC,CAAD,CADgC;AAAA,MAC3DK,KAD2D;AAAA,MACpDC,QADoD;;AAAA,mBAEhBN,QAAQ,CAAC,CAAD,CAFQ;AAAA,MAE3DO,iBAF2D;AAAA,MAExCC,oBAFwC;;AAAA,mBAGZR,QAAQ,CAAC,CAAD,CAHI;AAAA,MAG3DS,mBAH2D;AAAA,MAGtCC,sBAHsC;;AAAA,mBAKpBV,QAAQ,CAAC,IAAD,CALY;AAAA,MAK3DW,eAL2D;AAAA,MAK1CC,kBAL0C;;AAMlE,WAASC,OAAT,GAAmB;AACjBP,IAAAA,QAAQ,CAACD,KAAK,GAAG,CAAT,CAAR;AACD;;AAED,WAASS,iBAAT,GAA6B;AAC5B,QAAMC,oBAAoB,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBjB,UAAU,CAACkB,MAAtC,CAA7B;AACA,QAAMC,SAAS,GAAGnB,UAAU,CAACc,oBAAD,CAA5B;AACAH,IAAAA,kBAAkB,CAACQ,SAAD,CAAlB;AACD;;AAGD,WAASC,cAAT,GAAyB;AACvBT,IAAAA,kBAAkB,CAAC,IAAD,CAAlB;AACD;;AAEH,sBACE,QAAC,iBAAD,CAAmB,QAAnB;AACE,IAAA,KAAK,EAAE;AACLP,MAAAA,KAAK,EAALA,KADK;AAELE,MAAAA,iBAAiB,EAAjBA,iBAFK;AAGLE,MAAAA,mBAAmB,EAAnBA,mBAHK;AAILI,MAAAA,OAAO,EAAPA,OAJK;AAKLC,MAAAA,iBAAiB,EAAjBA,iBALK;AAMLH,MAAAA,eAAe,EAAfA,eANK;AAOLU,MAAAA,cAAc,EAAdA;AAPK,KADT;AAAA,cAWGjB;AAXH;AAAA;AAAA;AAAA;AAAA,UADF;AAeH;;GApCeD,kB;;KAAAA,kB","sourcesContent":["import {createContext, useState, ReactNode} from 'react';\nimport challenges from '../../challenges.json';\n\ninterface Challenge{\n  type: 'body' | 'eye';\n  description: string;\n  amount: number;\n}\n\ninterface ChallengesContextData {\n  level: number;\n  currentExperience: number;\n  challengesCompleted: number;\n  activeChallenge: Challenge;\n  levelUp: () => void;\n  startNewChallenge: () => void;\n  resetChallenge: () =>void;\n}\ninterface ChallengesProviderProps{\n    children: ReactNode;\n}\n\nexport const ChallengesContext = createContext ({} as ChallengesContextData);\n\nexport function ChallengesProvider({children} : ChallengesProviderProps) {\n       const [level, setLevel] = useState(1);\n       const [currentExperience, setCurrentExperience] = useState(0);\n       const [challengesCompleted, setChallengesCompleted] = useState(0);\n\n       const [activeChallenge, setActiveChallenge] = useState(null)\n       function levelUp() {\n         setLevel(level + 1);\n       }\n       \n       function startNewChallenge (){\n        const randomChallengeIndex = Math.floor(Math.random() * challenges.length)\n        const challenge = challenges[randomChallengeIndex];\n        setActiveChallenge(challenge)\n      }\n\n\n      function resetChallenge(){\n        setActiveChallenge(null); \n      }\n\n    return (\n      <ChallengesContext.Provider\n        value={{\n          level,\n          currentExperience,\n          challengesCompleted,\n          levelUp,\n          startNewChallenge,\n          activeChallenge,\n          resetChallenge,\n        }}\n      >\n        {children}\n      </ChallengesContext.Provider>\n    );\n}"]},"metadata":{},"sourceType":"module"}